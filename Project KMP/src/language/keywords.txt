Starter			:= Declaration
				| Display

Declaration 	:= Instanciation
				| Class
				| Instance
				| Relation
			
Instanciation	:= ?X:class has ?Y:instance
				| ?X:instance is ?Y:class
				| ?X:class ?Y:relation ?Z:class
				| ?X:instance ?Y:relation ?Z:instance

Class			:= ?X:class equivalentC ?Y:class
				| ?X:class inheritsC ?Y:class
				| ?X:class differentC ?Y:class

Instance 		:= ?X:instance equivalentI ?Y:instance
				| ?X:instance differentI ?Y:instance
			
Relation		:= ?X:relation equivalentR ?Y:relation
				| ?X:relation inheritsR ?Y:relation
				| ?X:relation differentR ?Y:relation
				| ?X:relation is symetric
				| ?X:relation is asymetric
				| ?X:relation is reflexive
				| ?X:relation is irreflexive
				| ?X:relation is functional
				| ?X:relation is inverseFunctional
				| ?X:relation is transitive

Display 		:= Show
				| Triple
			
Show			:= show ?X:class|instance|relation

Triple			:= ?[ ?X(:Model) ?Y(:relation|TripleR) ?Z(:Model) ]

TripleR			:= ?[ ?X(:relation) ?Y(:Model|Triple) ?Z(:relation) ]

Model			:= class|instance


Example:

Laurent is Man
Man has Laurent

Man isMarried Woman
Laurent isMarried Sophie

Man equivalentC Male
Man inheritsC Human
Man differentC Woman					//disjointWith

Laurent equivalentI Laurent_Thiry		//sameAs
Laurent differentI Sophie				//differentTo

isMarried equivalentR together
isMarried inheritsR hasRelation
isMarried differentR isDivorced			//inverseOf

isMarried is symetric
isMarried is asymetric
isMarried is reflexive
isMarried is irreflexive
isMarried is functional
isMarried is inverseFunctional
isMarried is transitive


Laurent aEu 20 en Maths a ENSISA







old Example:

class Country
instance France of Country

class Flag

relation Country hasFlag Flag (rule)

France hasFlag FrenchFlag (fact)


show FrenchFlag
"FrenchFlag is Flag" (inference)
"France hasFlag FrenchFlag"

